---
- hosts: all
  become: yes
  gather_facts: yes


  vars:
    slug: ubuntult
    home: /opt/ubuntu.lt
    path: "{{ home }}/spirit"
    server_admin: sirexas@gmail.com
    server_name: ubuntu.lt
    upgrade: false

  tasks:

  - name: update locale
    locale_gen: name={{ item }} state=present
    with_items:
    - en_US.UTF-8
    - lt_LT.UTF-8

  # Packages

  - name: apt repositories
    apt_repository: "repo='deb-src http://ubuntu-archive.mirror.serveriai.lt/ {{ ansible_distribution_release }} main restricted universe' state=present"

  - name: apt packages
    apt:
      name:
      - build-essential
      - postgresql
      - python3-psycopg2
      - python3-dev
      - virtualenv
      - apache2
      - libapache2-mod-wsgi-py3
      - gettext
      - git

  - name: apt build dependencies
    apt:
      state: build-dep
      name:
      - python3-lxml
      - python3-imaging
      - python3-psycopg2

  - name: create {{ slug }} user
    user: name={{ slug }} system=yes group=www-data home={{ home }}

  # Database

  - name: postgresql database
    postgresql_db: >
      name={{ slug }}
      encoding='UTF-8'
      lc_collate='C.UTF-8'
      lc_ctype='C.UTF-8'
      template='template0'
    become_user: postgres

  - name: postgresql user
    postgresql_user: db={{ slug }} name={{ slug }} priv=ALL
    become_user: postgres

  # App

  - name: clone repository
    git: repo=https://github.com/sirex/ubuntu.lt dest={{ path }} force=yes
    notify: restart gunicorn
    become_user: "{{ slug }}"

  # TODO: maybe set up deadsnakes PPA if python3.8 is not available on the server

  - name: create virtualenv
    command: virtualenv --python=python3 {{ home }}/venv chdir={{ path }} creates={{ home }}/venv/bin/python
    become_user: "{{ slug }}"

  - name: install project dependencies from requirements.txt
    command: "{{ home }}/venv/bin/pip install -r requirements.txt chdir={{ path }}"
    become_user: "{{ slug }}"

  - name: update translation files
    command: "{{ home }}/venv/bin/django-admin compilemessages -l lt chdir={{ path }}/ubuntult"
    become_user: "{{ slug }}"

  - name: run database migrations
    command: "{{ home }}/venv/bin/python manage.py migrate chdir={{ path }}"
    become_user: "{{ slug }}"

  - name: collect static
    command: "{{ home }}/venv/bin/python manage.py collectstatic --noinput chdir={{ path }}"
    become_user: "{{ slug }}"

  - name: rebuild search index
    command: "{{ home }}/venv/bin/python manage.py rebuild_index --noinput chdir={{ path }}"
    become_user: "{{ slug }}"
    when: upgrade

  # Apache

  - name: enabled apache modules
    apache2_module: name={{ item }} state=present
    with_items:
    - rewrite
    - ssl
    - proxy
    - proxy_http
    notify: restart apache

  - stat: path=/etc/letsencrypt/live/{{ server_name }}
    register: letsencryptcert

  - name: set up apache virtual host
    template: src=templates/apache.conf dest=/etc/apache2/sites-available/{{ server_name }}.conf
    notify: reload apache

  - name: enable apache site
    file: src=../sites-available/{{ server_name }}.conf dest=/etc/apache2/sites-enabled/{{ server_name }}.conf state=link
    notify: reload apache

  - name: create log dir
    file: path=/var/log/apache2/{{ server_name }} state=directory

  - name: start apache
    service: name=apache2 state=started

  # Let's Encrypt

  - name: "let's encrypt: apt packages"
    apt:
      name:
      - libaugeas0
      - libssl-dev
      - libffi-dev
      - ca-certificates

  - name: "let's encrypt: pip packages"
    pip: name={{ item }} virtualenv=/opt/letsencrypt state=latest
    with_items:
    - certbot
    - certbot-apache

  - name: "let's encrypt!"
    command: >
      /opt/letsencrypt/bin/letsencrypt certonly
        --text
        --agree-tos
        --non-interactive
        --expand
        --domain {{ server_name }}
        --domain www.{{ server_name }}
        --email {{ server_admin }}
        --authenticator apache
      creates=/etc/letsencrypt/live/{{ server_name }}
    notify: reload apache
    register: letsencrypt

  - name: "let's encrypt: watch changes"
    stat: path=/etc/letsencrypt/live/{{ server_name }}
    register: letsencryptcert
    when: letsencrypt.changed

  - name: "let's encrypt: apache config after letsencrypt"
    template: src=templates/apache.conf dest=/etc/apache2/sites-available/{{ server_name }}.conf
    notify: reload apache
    when: letsencrypt.changed

  # Backups

  - name: cron for database backups
    cron: name="db backup" minute="0" hour="5" job="pg_dump ubuntult | gzip -c > /opt/ubuntu.lt/ubuntu_lt.sql.gz"
    become_user: "{{ slug }}"


  handlers:

  - name: restart apache
    service: name=apache2 state=restarted

  - name: reload apache
    service: name=apache2 state=reloaded
