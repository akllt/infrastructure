---
- hosts: all
  sudo: yes
  gather_facts: yes


  vars:
    home: /opt/savanoriai.maistobankas.lt
    path: "{{ home }}/app"
    env: production
    server_admin: sirexas@gmail.com
    server_name: savanoriai.maistobankas.lt

  vars_files:
    - vars/{{ env }}.yml


  tasks:

  - fail: msg="Ansible version 1.9 or greater required."
    when: ansible_version.full | version_compare('1.9', '<')

  - name: update locale
    locale_gen: name={{ item }} state=present
    with_items:
    - en_US.UTF-8
    - lt_LT.UTF-8

  - name: apt repositories
    apt_repository: repo='deb-src http://ubuntu-archive.mirror.serveriai.lt/ {{ ansible_distribution_release }} main restricted universe' state=present

  - name: apt packages
    apt: pkg={{ item }} state=latest
    with_items:
    - build-essential
    - postgresql
    - python-psycopg2
    - python-dev
    - python-pip
    - python-virtualenv
    - apache2
    - libapache2-mod-wsgi-py3
    - git

    # Lets encrypt
    - libaugeas0
    - libssl-dev
    - libffi-dev
    - ca-certificates

  - name: create savanoriai user
    user: name=savanoriai system=yes group=www-data home={{ home }}

  - name: postgresql database
    postgresql_db: >
      name=savanoriai
      encoding='UTF-8'
      lc_collate='C.UTF-8'
      lc_ctype='C.UTF-8'
      template='template0'
    become: yes
    become_user: postgres

  - name: postgresql user
    postgresql_user: db=savanoriai name=savanoriai priv=ALL
    become: yes
    become_user: postgres

  - name: clone repository
    git: repo=https://github.com/sirex/savanoriai dest={{ path }} force=yes
    notify: reload apache
    become: yes
    become_user: savanoriai

  - name: install app dependencies
    command: make ubuntu chdir={{ path }}

  - name: init buildout
    command: python3 scripts/genconfig.py config/env/{{ env }}.cfg chdir={{ path }}
    become: yes
    become_user: savanoriai

  - name: build project
    command: make chdir={{ path }}
    become: yes
    become_user: savanoriai

  - name: migrate database
    command: bin/django migrate --noinput chdir={{ path }}
    become: yes
    become_user: savanoriai

  - name: collectstatic
    command: bin/django collectstatic --noinput chdir={{ path }}
    become: yes
    become_user: savanoriai

  - name: compilemessages
    command: ../bin/django compilemessages -l lt chdir={{ path }}/savanoriai
    become: yes
    become_user: savanoriai

  - stat: path=/etc/letsencrypt/live/{{ server_name }}
    register: letsencryptcert

  - name: set up apache virtual host
    template: src=templates/apache.conf dest=/etc/apache2/sites-enabled/savanoriai.maistobankas.lt.conf
    notify: reload apache

  - name: create log dir
    file: path=/var/log/apache2/savanoriai.maistobankas.lt state=directory

  - name: create data dir
    file: path={{ path }}/var/www/data state=directory
    become: yes
    become_user: savanoriai

  - name: start apache
    service: name=apache2 state=started

  # Let's Encrypt

  - name: Install letsencrypt
    pip: virtualenv={{ path }}/letsencrypt name=letsencrypt
    when: env == 'production'

  - name: reload apache for letsencrypt webroot auth
    service: name=apache2 state=reloaded
    when: env == 'production' and not letsencryptcert.stat.exists

  - name: Let's Encrypt!
    command: >
      {{ path }}/letsencrypt/bin/letsencrypt
      --agree-tos --text --non-interactive
      --domain {{ server_name }}
      --email {{ server_admin }}
      --authenticator webroot
      --webroot-path {{ path }}/var/www
      certonly
      creates=/etc/letsencrypt/live/{{ server_name }}
    notify: reload apache
    register: letsencrypt
    when: env == 'production'

  - stat: path=/etc/letsencrypt/live/{{ server_name }}
    register: letsencryptcert
    when: letsencrypt.changed and env == 'production'

  - name: apache config after letsencrypt
    template: src=templates/apache.conf dest=/etc/apache2/sites-enabled/{{ name }}.conf
    notify: reload apache
    when: letsencrypt.changed and env == 'production'


  handlers:

  - name: reload source code
    command: touch --no-create {{ path }}/bin/django.wsgi

  - name: reload apache
    service: name=apache2 state=reloaded
